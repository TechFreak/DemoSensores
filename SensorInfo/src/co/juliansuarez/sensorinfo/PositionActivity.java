package co.juliansuarez.sensorinfo;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;

public class PositionActivity extends Activity implements LocationListener {

	private LocationManager locationManager;
	
	private TextView textViewProviderValue;
	private TextView textViewLatitudeValue;
	private TextView textViewLongitudeValue;
	private TextView textViewAltitudeValue;
	private TextView textViewAccuracyValue;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_position);
		// Show the Up button in the action bar.
		setupActionBar();

		// Acquire a reference to the system Location Manager
		locationManager = (LocationManager) this
				.getSystemService(Context.LOCATION_SERVICE);
		
		//init views
		textViewProviderValue = (TextView) findViewById(R.id.textViewProviderValue);
		textViewLatitudeValue = (TextView) findViewById(R.id.textViewLatitudeValue);
		textViewLongitudeValue = (TextView) findViewById(R.id.textViewLongitudeValue);
		textViewAltitudeValue = (TextView) findViewById(R.id.textViewAltitudeValue);
		textViewAccuracyValue = (TextView) findViewById(R.id.textViewAccuracyValue);
	}

	@Override
	protected void onStart() {
		super.onStart();
		// Register the listener with the Location Manager to receive location
		// updates
		locationManager.requestLocationUpdates(
				LocationManager.NETWORK_PROVIDER, 0, 0, this);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0,
				0, this);
	}

	@Override
	protected void onStop() {
		locationManager.removeUpdates(this);
		super.onStop();
	}

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.position, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onLocationChanged(Location location) {
		handleLocation(location);

	}

	@Override
	public void onProviderDisabled(String provider) {

	}

	@Override
	public void onProviderEnabled(String provider) {
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
	}


	private void handleLocation(Location location) {
		textViewProviderValue.setText(location.getProvider());
		textViewLatitudeValue.setText(Double.toString(location.getLatitude()));
		textViewLongitudeValue.setText(Double.toString(location.getLongitude()));
		textViewAltitudeValue.setText(Double.toString(location.getAltitude()));
		
		/*
		 * Nota sobre la exactitud:
		 * 
		 * Esto es a lo que se refiere la documentación de Android respecto a este valor
		 * 
		 * Get the estimated accuracy of this location, in meters.
			
			We define accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
			
			In statistical terms, it is assumed that location errors are random with a normal distribution, so the 68% confidence circle represents one standard deviation. Note that in practice, location errors do not always follow such a simple distribution.
			
			This accuracy estimation is only concerned with horizontal accuracy, and does not indicate the accuracy of bearing, velocity or altitude if those are included in this Location.
			
			If this location does not have an accuracy, then 0.0 is returned. All locations generated by the LocationManager include an accuracy.
		 * 
		 */
		
		textViewAccuracyValue.setText(Float.toString(location.getAccuracy()));
	}

}
